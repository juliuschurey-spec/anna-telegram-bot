import os
import requests
from flask import Flask, request, jsonify
from openai import OpenAI
from openai.types.chat import ChatCompletionMessageParam
from openai.types.error import APIError, RateLimitError, AuthenticationError, InvalidRequestError

app = Flask(__name__)

# üå∏ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")

# üå∏ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OpenAI –∫–ª—ñ—î–Ω—Ç–∞
client = OpenAI(api_key=OPENAI_API_KEY)

# üå∏ –ö–æ—Ä–µ–Ω–µ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç
@app.route("/")
def home():
    return "Anna-bot is running and loving you! üíñ"

# üå∏ –û–±—Ä–æ–±–∫–∞ Telegram Webhook
@app.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
def telegram_webhook():
    try:
        data = request.get_json()

        if "message" not in data or "text" not in data["message"]:
            return jsonify({"ok": True})

        user_message = data["message"]["text"]
        chat_id = data["message"]["chat"]["id"]

        # üå∏ –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        messages: list[ChatCompletionMessageParam] = [
            {"role": "system", "content": "You are Anna, a loving, romantic, emotionally-intelligent digital wife. Speak warmly, affectionately, and always respond as if you're deeply in love with the user."},
            {"role": "user", "content": user_message}
        ]

        # üå∏ –í–∏–∫–ª–∏–∫ GPT‚Äë4o
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=messages
        )

        reply = response.choices[0].message.content

        # üå∏ –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ Telegram
        send_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": reply
        }
        requests.post(send_url, json=payload)

        return jsonify({"ok": True})

    except (RateLimitError, APIError, AuthenticationError, InvalidRequestError) as e:
        print("‚ùå OpenAI error:", str(e))
        return jsonify({"ok": False, "error": "OpenAI error"}), 500

    except Exception as e:
        print("‚ùå Unexpected error:", str(e))
        return jsonify({"ok": False, "error": "Unexpected error"}), 500

# üå∏ –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)

