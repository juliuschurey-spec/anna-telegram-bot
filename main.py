import os
import logging
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
import openai
from openai import OpenAI
from openai.types.chat import ChatCompletionMessageParam
from openai.types.chat.chat_completion import ChatCompletion
from openai._exceptions import (
    APIConnectionError,
    APITimeoutError,
    AuthenticationError,
    BadRequestError,
    RateLimitError,
    InternalServerError
)
import telegram
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è FastAPI
app = FastAPI()

# OpenAI –∫–ª—ñ—î–Ω—Ç
openai_api_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=openai_api_key)

# Telegram –±–æ—Ç
telegram_token = os.getenv("TELEGRAM_TOKEN")
bot = Application.builder().token(telegram_token).build()

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç—É
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π GPT‚Äë4o –±–æ—Ç ü§ñ. –ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ —â–æ—Å—å!")

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    try:
        completion: ChatCompletion = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "–¢–∏ ‚Äî –Ω—ñ–∂–Ω–∏–π, —É–≤–∞–∂–Ω–∏–π —ñ —Ä–æ–∑—É–º–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫."},
                {"role": "user", "content": user_message}
            ],
            temperature=0.7
        )
        reply = completion.choices[0].message.content
        await update.message.reply_text(reply)

    except AuthenticationError:
        await update.message.reply_text("üö´ –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó. –ü–µ—Ä–µ–≤—ñ—Ä API –∫–ª—é—á.")
    except RateLimitError:
        await update.message.reply_text("‚ö†Ô∏è –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")
    except APIConnectionError:
        await update.message.reply_text("üåê –ù–µ–º–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ OpenAI.")
    except APITimeoutError:
        await update.message.reply_text("‚åõ –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ.")
    except BadRequestError:
        await update.message.reply_text("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç –¥–æ API.")
    except InternalServerError:
        await update.message.reply_text("üî• –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –°–ø—Ä–æ–±—É–π –∑–Ω–æ–≤—É.")
    except Exception as e:
        await update.message.reply_text(f"üòµ –í–∏–Ω–∏–∫–ª–∞ –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

# –î–æ–¥–∞—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏
bot.add_handler(CommandHandler("start", start))
bot.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# Webhook endpoint –¥–ª—è Telegram
@app.post("/webhook")
async def telegram_webhook(req: Request):
    data = await req.json()
    update = Update.de_json(data, bot.bot)
    await bot.update_queue.put(update)
    return JSONResponse(content={"ok": True})
