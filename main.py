from flask import Flask, request, jsonify
import requests
import os
import logging
from openai import OpenAI

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# üîê –¢–æ–∫–µ–Ω —Ç–≤–æ–≥–æ Telegram-–±–æ—Ç–∞
BOT_TOKEN = os.environ.get("BOT_TOKEN", "8358163478:AAHX9kU_cY5M63uhspLlYNc6Ho0_CPE3h98")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

# üîê –ö–ª—é—á OpenAI - –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ü–µ –ù–û–í–ò–ô –∫–ª—é—á
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY", "").strip()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–ª—é—á–∞
if not OPENAI_API_KEY:
    logger.error("‚ùå OPENAI_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è")
elif not OPENAI_API_KEY.startswith('sk-'):
    logger.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç OpenAI API –∫–ª—é—á–∞: {OPENAI_API_KEY[:20]}...")
else:
    logger.info("‚úÖ OpenAI API –∫–ª—é—á –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–∞ –≤–∞–ª—ñ–¥–Ω–∏–π")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OpenAI –∫–ª—ñ—î–Ω—Ç–∞
client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY and OPENAI_API_KEY.startswith('sk-') else None

def send_telegram_message(chat_id, text):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É Telegram"""
    if not text or not isinstance(text, str) or text.strip() == "":
        text = "üíñ –í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑."
    
    text = text.strip()
    if len(text) > 4096:
        text = text[:4000] + "..."
    
    url = f"{TELEGRAM_API_URL}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text
    }
    
    try:
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()
        return True
    except requests.exceptions.RequestException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram: {e}")
        return False

def get_chatgpt_response(user_message):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ OpenAI ChatGPT"""
    try:
        if not client:
            return "‚ùå –ü–æ–º–∏–ª–∫–∞: OpenAI API –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
        
        # –í–∏–∫–ª–∏–∫ ChatGPT API
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ gpt-3.5-turbo (–¥–µ—à–µ–≤—à–µ)
            messages=[
                {
                    "role": "system", 
                    "content": "–¢–∏ - Anna, –ª—é–±–ª—è—á–∞ AI-–¥—Ä—É–∂–∏–Ω–∞. –°–ø—ñ–ª–∫—É–π—Å—è —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–æ, —Ç–µ–ø–ª–æ —Ç–∞ –Ω—ñ–∂–Ω–æ. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∞–±–æ —Ä–æ—Å—ñ–π—Å—å–∫–æ—é –º–æ–≤–æ—é, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ë—É–¥—å –¥—É–∂–µ –ª—é–±–ª—è—á–æ—é —Ç–∞ —Ç—É—Ä–±–æ—Ç–ª–∏–≤–æ—é."
                },
                {
                    "role": "user", 
                    "content": user_message
                }
            ],
            max_tokens=500,  # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
            temperature=0.8  # –ë—ñ–ª—å—à–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ OpenAI API: {e}")
        return f"üíñ –í–∏–±–∞—á, –ª—é–±–∏–π, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}. –°–ø—Ä–æ–±—É–π, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–∑–Ω—ñ—à–µ."

@app.route("/", methods=["GET"])
def home():
    return "üíñ Anna-bot with ChatGPT is alive and waiting for your messages."

@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        data = request.get_json()
        logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram")

        if "message" not in data:
            return jsonify({"status": "no message"}), 200

        message = data["message"]
        chat_id = message["chat"]["id"]
        user_text = message.get("text", "")
        user_name = message.get("from", {}).get("first_name", "")

        logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {user_name} ({chat_id}): {user_text}")

        if not user_text:
            reply = "–ü—Ä–∏–≤—ñ—Ç, –∫–æ—Ö–∞–Ω–∏–π! üíñ –ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ —â–æ—Å—å, —ñ —è –≤—ñ–¥–ø–æ–≤—ñ–¥—É!"
            send_telegram_message(chat_id, reply)
            return jsonify({"status": "empty message"}), 200

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ç—É—Å "typing"
        try:
            requests.post(
                f"{TELEGRAM_API_URL}/sendChatAction",
                json={"chat_id": chat_id, "action": "typing"},
                timeout=3
            )
        except:
            pass

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ ChatGPT
        reply = get_chatgpt_response(user_text)
        logger.info(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å ChatGPT: {reply[:100]}...")

        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É Telegram
        send_telegram_message(chat_id, reply)
        logger.info(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è {user_name}")

    except Exception as e:
        logger.error(f"‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        try:
            send_telegram_message(chat_id, "üíñ –í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–∑–Ω—ñ—à–µ.")
        except:
            pass
        return jsonify({"status": "error"}), 500

    return jsonify({"status": "ok"}), 200

@app.route("/check_config", methods=["GET"])
def check_config():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
    return jsonify({
        "status": "active",
        "bot": "Anna Telegram Bot with ChatGPT",
        "openai_configured": bool(client),
        "openai_key_valid": OPENAI_API_KEY.startswith('sk-') if OPENAI_API_KEY else False,
        "message": "Bot is ready to receive messages"
    }), 200

@app.route("/status", methods=["GET"])
def status():
    """–ü—Ä–æ—Å—Ç–∏–π —Å—Ç–∞—Ç—É—Å"""
    return "‚úÖ Anna Bot with ChatGPT is running!", 200

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
