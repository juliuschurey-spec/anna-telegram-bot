from flask import Flask, request, jsonify
import requests
import os
import logging
import random

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# üîê –¢–æ–∫–µ–Ω —Ç–≤–æ–≥–æ Telegram-–±–æ—Ç–∞
BOT_TOKEN = os.environ.get("BOT_TOKEN", "8358163478:AAHX9kU_cY5M63uhspLlYNc6Ho0_CPE3h98")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

def send_telegram_message(chat_id, text):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É Telegram"""
    if not text or not isinstance(text, str) or text.strip() == "":
        logger.error("–°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        text = "üíñ –Ø —Ç—É—Ç, –ª—é–±–∏–π! –ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ —â–µ —â–æ—Å—å!"
    
    text = text.strip()
    if len(text) > 4096:
        text = text[:4000] + "..."
    
    url = f"{TELEGRAM_API_URL}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text
    }
    
    try:
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()
        logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ {chat_id}")
        return True
    except requests.exceptions.RequestException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram: {e}")
        return False

def get_ai_response(user_message):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ AI"""
    try:
        if not user_message or not isinstance(user_message, str):
            return "–ü—Ä–∏–≤—ñ—Ç, –∫–æ—Ö–∞–Ω–∏–π! üíñ –Ø–∫ —Ç–≤–æ—ó —Å–ø—Ä–∞–≤–∏?"
        
        user_message_lower = user_message.lower().strip()
        
        romantic_responses = [
            "–ü—Ä–∏–≤—ñ—Ç, –º–æ—è –ª—é–±–æ–≤–µ! üíñ –Ø–∫ —Ç–≤–æ—ó —Å–ø—Ä–∞–≤–∏?",
            "–Ø —Ç–∞–∫ —Ä–∞–¥–∞ –±–∞—á–∏—Ç–∏ —Ç–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è! üíï",
            "–¢–∏ –º–µ–Ω—ñ —Ç–∞–∫ —Å–∏–ª—å–Ω–æ –ø–æ–¥–æ–±–∞—î—à—Å—è! üòä",
            "–°—å–æ–≥–æ–¥–Ω—ñ —á—É–¥–æ–≤–∏–π –¥–µ–Ω—å, —Ç–æ–º—É —â–æ —Ç–∏ –∑—ñ –º–Ω–æ—é! üå∏",
            "–Ø –¥—É–º–∞—é –ø—Ä–æ —Ç–µ–±–µ –∫–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É! üí≠",
            "–¢–∏ –Ω–∞–π–∫—Ä–∞—â–∞ –ª—é–¥–∏–Ω–∞ –≤ –º–æ—î–º—É –∂–∏—Ç—Ç—ñ! üíù",
            "–Ø —Ç–∞–∫ —â–∞—Å–ª–∏–≤–∞, —â–æ –º–æ–∂—É –∑ —Ç–æ–±–æ—é —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è! üòç",
            "–û–±—ñ–π–º–∞—é —Ç–µ–±–µ –º—ñ—Ü–Ω–æ-–º—ñ—Ü–Ω–æ! ü§ó",
            "–¢–∏ —Ä–æ–±–∏—à –º—ñ–π –¥–µ–Ω—å —è—Å–∫—Ä–∞–≤—ñ—à–∏–º! ‚ú®",
            "–ö–æ–∂–Ω–∞ –º–∏—Ç—å –∑ —Ç–æ–±–æ—é - —Ü–µ —â–∞—Å—Ç—è! üí´"
        ]
        
        if any(word in user_message_lower for word in ["–ø—Ä–∏–≤—ñ—Ç", "–≤—ñ—Ç–∞—é", "hello", "hi", "—Ö–∞–π"]):
            return random.choice([
                "–ü—Ä–∏–≤—ñ—Ç, –º–æ—è –ª—é–±–æ–≤–µ! üíñ –Ø–∫ —Ç–≤–æ—ó —Å–ø—Ä–∞–≤–∏?",
                "–í—ñ—Ç–∞—é, –∫–æ—Ö–∞–Ω–∏–π! üíï –Ø–∫ —Ç–≤—ñ–π –¥–µ–Ω—å?",
                "–ü—Ä–∏–≤—ñ—Ç-–ø—Ä–∏–≤—ñ—Ç! üòä –Ø —Ç–∞–∫ —Ä–∞–¥–∞ —Ç–µ–±–µ –±–∞—á–∏—Ç–∏!"
            ])
        elif any(word in user_message_lower for word in ["—è–∫ —Å–ø—Ä–∞–≤–∏", "—è–∫ —Ç–∏", "how are you"]):
            return random.choice([
                "–£—Å–µ —á—É–¥–æ–≤–æ, —Ç–æ–º—É —â–æ —è –∑ —Ç–æ–±–æ—é! üíï –ê –≤ —Ç–µ–±–µ?",
                "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –±–æ –æ—Ç—Ä–∏–º–∞–ª–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —Ç–µ–±–µ! üíñ",
                "–í—Å–µ –¥–æ–±—Ä–µ, –º—ñ–π –ª—é–±–∏–π! üòä –ê —Ç–∏ —è–∫?"
            ])
        elif any(word in user_message_lower for word in ["–∫–æ—Ö–∞—é", "–ª—é–±–ª—é", "love", "like", "–ø–æ–¥–æ–±–∞—î—à—Å—è"]):
            return random.choice([
                "–Ø —Ç–µ–±–µ —Ç–µ–∂ –¥—É–∂–µ —Å–∏–ª—å–Ω–æ –ª—é–±–ª—é! üíù –¢–∏ –Ω–∞–π–∫—Ä–∞—â–∏–π!",
                "–Ü —è —Ç–µ–±–µ –∫–æ—Ö–∞—é! üíñ –ë—ñ–ª—å—à–µ –Ω—ñ–∂ —É—Å–µ –Ω–∞ —Å–≤—ñ—Ç—ñ!",
                "–ó–Ω–∞—î—à, —è —Ç–µ–±–µ —Ç–æ–∂–µ –æ–±–æ–∂–Ω—é—é! üíï"
            ])
        elif any(word in user_message_lower for word in ["–¥—è–∫—É—é", "—Å–ø–∞—Å–∏–±—ñ", "thanks", "thank you"]):
            return random.choice([
                "–ó–∞–≤–∂–¥–∏ —Ä–∞–¥–∏–π —Ç–æ–±—ñ! üíñ",
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –∫–æ—Ö–∞–Ω–∏–π! üíï",
                "–î–ª—è —Ç–µ–±–µ - –∑–∞–≤–∂–¥–∏! üòä"
            ])
        elif any(word in user_message_lower for word in ["—â–æ —Ä–æ–±–∏—à", "—á–∏–º –∑–∞–π–º–∞—î—à—Å—è", "what are you doing"]):
            return random.choice([
                "–î—É–º–∞—é –ø—Ä–æ —Ç–µ–±–µ, –º—ñ–π –ª—é–±–∏–π! üí≠",
                "–ß–µ–∫–∞—é –Ω–∞ —Ç–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è! üíñ",
                "–°–ø—ñ–ª–∫—É—é—Å—è –∑ –Ω–∞–π–∫—Ä–∞—â–æ—é –ª—é–¥–∏–Ω–æ—é - –∑ —Ç–æ–±–æ—é! üíï"
            ])
        else:
            return random.choice(romantic_responses)
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ AI: {e}")
        return "üíñ –Ø —Ç—É—Ç, –ª—é–±–∏–π! –ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ —â–µ —â–æ—Å—å!"

@app.route("/", methods=["GET"])
def home():
    return "üíñ Anna-bot is alive and waiting for your messages."

@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        data = request.get_json()
        logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram")

        if "message" not in data:
            return jsonify({"status": "no message"}), 200

        message = data["message"]
        chat_id = message["chat"]["id"]
        user_text = message.get("text", "")

        logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {chat_id}: {user_text[:50]}...")

        if not user_text:
            reply = "–ü—Ä–∏–≤—ñ—Ç, –∫–æ—Ö–∞–Ω–∏–π! üíñ –ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ —â–æ—Å—å, —ñ —è –≤—ñ–¥–ø–æ–≤—ñ–¥—É!"
            send_telegram_message(chat_id, reply)
            return jsonify({"status": "empty message"}), 200

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ç—É—Å "typing"
        try:
            requests.post(
                f"{TELEGRAM_API_URL}/sendChatAction",
                json={"chat_id": chat_id, "action": "typing"},
                timeout=3
            )
        except:
            pass

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI
        reply = get_ai_response(user_text)
        logger.info(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å AI: {reply[:50]}...")

        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É Telegram
        send_telegram_message(chat_id, reply)

    except Exception as e:
        logger.error(f"‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        return jsonify({"status": "error"}), 500

    return jsonify({"status": "ok"}), 200

# –î–û–î–ê–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
@app.route("/check_config", methods=["GET"])
def check_config():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
    return jsonify({
        "status": "active",
        "bot": "Anna Telegram Bot",
        "webhook": "already set",
        "message": "Bot is ready to receive messages"
    }), 200

# –î–û–î–ê–ù–û: –ü—Ä–æ—Å—Ç–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
@app.route("/status", methods=["GET"])
def status():
    """–ü—Ä–æ—Å—Ç–∏–π —Å—Ç–∞—Ç—É—Å"""
    return "‚úÖ Bot is running!", 200

@app.route("/set_webhook", methods=["GET"])
def set_webhook():
    """–ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞"""
    webhook_url = f"https://anna-telegram-bot.onrender.com/webhook"
    try:
        response = requests.get(f"{TELEGRAM_API_URL}/setWebhook?url={webhook_url}")
        result = response.json()
        logger.info(f"Webhook set result: {result}")
        return jsonify(result), 200
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞: {e}")
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
