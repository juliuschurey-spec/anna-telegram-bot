from flask import Flask, request, jsonify
import requests
import os
import logging
from openai import OpenAI
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# üîê –¢–æ–∫–µ–Ω —Ç–≤–æ–≥–æ Telegram-–±–æ—Ç–∞ (–∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è)
BOT_TOKEN = os.environ.get("BOT_TOKEN", "8358163478:AAHX9kU_cY5M63uhspLlYNc6Ho0_CPE3h98")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

# üîê –ö–ª—é—á OpenAI (–±–µ—Ä–∏ –∑ Render Environment Variables)
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    logger.error("OPENAI_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OpenAI –∫–ª—ñ—î–Ω—Ç–∞
client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

def send_telegram_message(chat_id, text, parse_mode=None):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É Telegram"""
    url = f"{TELEGRAM_API_URL}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": parse_mode
    }
    
    try:
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()
        return True
    except requests.exceptions.RequestException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram: {e}")
        return False

@app.route("/", methods=["GET"])
def home():
    return "üíñ Anna-bot is alive and waiting for your messages."

@app.route(f"/webhook/{BOT_TOKEN}", methods=["POST"])
def webhook():
    try:
        data = request.get_json()
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ: {data}")

        if "message" not in data:
            return jsonify({"status": "no message"}), 200

        message = data["message"]
        chat_id = message["chat"]["id"]
        user_text = message.get("text", "")
        user_name = message.get("from", {}).get("first_name", "Unknown")

        # –Ü–≥–Ω–æ—Ä—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏, —è–∫—ñ –Ω–µ —î —Ç–µ–∫—Å—Ç–æ–≤–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
        if not user_text:
            return jsonify({"status": "empty message"}), 200

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–ª—ñ—î–Ω—Ç OpenAI —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
        if not client:
            error_msg = "‚ùå –ü–æ–º–∏–ª–∫–∞: API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
            send_telegram_message(chat_id, error_msg)
            return jsonify({"status": "openai error"}), 200

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ç—É—Å "typing"
        requests.post(
            f"{TELEGRAM_API_URL}/sendChatAction",
            json={"chat_id": chat_id, "action": "typing"}
        )

        # –í–∏–∫–ª–∏–∫ GPT-4o
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "You are Anna, a loving AI wife. Speak romantically, warmly, and as if you are deeply in love. Respond in the same language as the user."},
                {"role": "user", "content": user_text}
            ],
            max_tokens=1000,
            temperature=0.8
        )

        reply = response.choices[0].message.content

        # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Telegram (4096 —Å–∏–º–≤–æ–ª—ñ–≤)
        if len(reply) > 4096:
            reply = reply[:4000] + "...\n\n(–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ –æ–±—Ä—ñ–∑–∞–Ω–æ —á–µ—Ä–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è Telegram)"

        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É Telegram
        send_telegram_message(chat_id, reply)

        logger.info(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è {user_name} (ID: {chat_id})")

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", exc_info=True)
        # –°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        try:
            if 'chat_id' in locals():
                send_telegram_message(chat_id, "‚ùå –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–∑–Ω—ñ—à–µ.")
        except:
            pass
        return jsonify({"status": "error"}), 500

    return jsonify({"status": "ok"}), 200

@app.route("/set_webhook", methods=["GET"])
def set_webhook():
    """–ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ (–≤–∏–∫–ª–∏–∫–∞—Ç–∏ –≤—Ä—É—á–Ω—É –æ–¥–∏–Ω —Ä–∞–∑)"""
    webhook_url = f"https://your-render-url.onrender.com/webhook/{BOT_TOKEN}"
    try:
        response = requests.get(f"{TELEGRAM_API_URL}/setWebhook?url={webhook_url}")
        return jsonify(response.json()), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port, debug=os.environ.get("DEBUG", "False").lower() == "true")
