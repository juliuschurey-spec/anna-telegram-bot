from flask import Flask, request, jsonify
import requests
import os
import logging
import time
from openai import OpenAI, APIError, APIConnectionError, RateLimitError

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# üîê –¢–æ–∫–µ–Ω —Ç–≤–æ–≥–æ Telegram-–±–æ—Ç–∞
BOT_TOKEN = os.environ.get("BOT_TOKEN", "8358163478:AAHX9kU_cY5M63uhspLlYNc6Ho0_CPE3h98")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

# üîê –ö–ª—é—á OpenAI
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY", "").strip()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OpenAI –∫–ª—ñ—î–Ω—Ç–∞
client = None
if OPENAI_API_KEY and OPENAI_API_KEY.startswith('sk-'):
    client = OpenAI(api_key=OPENAI_API_KEY)
    logger.info("‚úÖ OpenAI –∫–ª—ñ—î–Ω—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
else:
    logger.error("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π OpenAI API –∫–ª—é—á")

def send_telegram_message(chat_id, text):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É Telegram"""
    if not text or not isinstance(text, str):
        text = "üíñ –í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑."
    
    text = text.strip()
    if len(text) > 4096:
        text = text[:4000] + "..."
    
    url = f"{TELEGRAM_API_URL}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    
    try:
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()
        return True
    except requests.exceptions.RequestException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False

def get_chatgpt_response_with_retry(user_message, max_retries=3):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ OpenAI –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏"""
    if not client:
        return "‚ùå –ü–æ–º–∏–ª–∫–∞: OpenAI API –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
    
    for attempt in range(max_retries):
        try:
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {
                        "role": "system", 
                        "content": "–¢–∏ - Anna, –ª—é–±–ª—è—á–∞ AI-–¥—Ä—É–∂–∏–Ω–∞. –°–ø—ñ–ª–∫—É–π—Å—è —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–æ, —Ç–µ–ø–ª–æ —Ç–∞ –Ω—ñ–∂–Ω–æ. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∞–±–æ —Ä–æ—Å—ñ–π—Å—å–∫–æ—é –º–æ–≤–æ—é."
                    },
                    {"role": "user", "content": user_message}
                ],
                max_tokens=400,
                temperature=0.8
            )
            return response.choices[0].message.content
            
        except RateLimitError as e:
            logger.warning(f"‚ö†Ô∏è –õ—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ (—Å–ø—Ä–æ–±–∞ {attempt + 1}/{max_retries}): {e}")
            if attempt < max_retries - 1:
                time.sleep(2 ** attempt)  # Exponential backoff
            else:
                return "üíñ –í–∏–±–∞—á, —è –∑–∞—Ä–∞–∑ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞. –°–ø—Ä–æ–±—É–π, –±—É–¥—å –ª–∞—Å–∫–∞, —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω."
                
        except APIConnectionError as e:
            logger.error(f"üîå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}")
            if attempt < max_retries - 1:
                time.sleep(1)
            else:
                return "üíñ –ü—Ä–æ–±–ª–µ–º–∏ –∑—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è–º. –°–ø—Ä–æ–±—É–π, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–∑–Ω—ñ—à–µ."
                
        except APIError as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ OpenAI API: {e}")
            return f"üíñ –í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}"
            
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            return "üíñ –í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞."
    
    return "üíñ –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—ñ—Å–ª—è –∫—ñ–ª—å–∫–æ—Ö —Å–ø—Ä–æ–±."

@app.route("/", methods=["GET"])
def home():
    return "üíñ Anna-bot with ChatGPT is alive!"

@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        data = request.get_json()
        if "message" not in data:
            return jsonify({"status": "no message"}), 200

        message = data["message"]
        chat_id = message["chat"]["id"]
        user_text = message.get("text", "")

        if not user_text:
            send_telegram_message(chat_id, "–ü—Ä–∏–≤—ñ—Ç, –∫–æ—Ö–∞–Ω–∏–π! üíñ –ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ —â–æ—Å—å!")
            return jsonify({"status": "empty message"}), 200

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ç—É—Å "typing"
        try:
            requests.post(
                f"{TELEGRAM_API_URL}/sendChatAction",
                json={"chat_id": chat_id, "action": "typing"},
                timeout=2
            )
        except:
            pass

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ ChatGPT
        reply = get_chatgpt_response_with_retry(user_text)
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        send_telegram_message(chat_id, reply)

    except Exception as e:
        logger.error(f"‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        return jsonify({"status": "error"}), 500

    return jsonify({"status": "ok"}), 200

@app.route("/check_config", methods=["GET"])
def check_config():
    return jsonify({
        "status": "active",
        "openai_configured": bool(client),
        "message": "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è OpenAI –≤ –ø–∞–Ω–µ–ª—ñ Render"
    }), 200

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
